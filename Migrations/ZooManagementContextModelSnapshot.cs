// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZooManagement;

#nullable disable

namespace ZooManagement.Migrations
{
    [DbContext(typeof(ZooManagementContext))]
    partial class ZooManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("ZooManagement.Models.Animal", b =>
                {
                    b.Property<int>("AnimalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AnimalTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DateAcquired")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<int>("EnclosureId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("LastDateAtZoo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sex")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Transfer")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TransferLocation")
                        .HasColumnType("TEXT");

                    b.HasKey("AnimalId");

                    b.HasIndex("AnimalTypeId");

                    b.HasIndex("EnclosureId");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("ZooManagement.Models.AnimalType", b =>
                {
                    b.Property<int>("AnimalTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassificationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Species")
                        .HasColumnType("TEXT");

                    b.HasKey("AnimalTypeId");

                    b.HasIndex("ClassificationId");

                    b.ToTable("AnimalTypes");
                });

            modelBuilder.Entity("ZooManagement.Models.Classification", b =>
                {
                    b.Property<int>("ClassificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Class")
                        .HasColumnType("TEXT");

                    b.HasKey("ClassificationId");

                    b.ToTable("Classifications");
                });

            modelBuilder.Entity("ZooManagement.Models.Enclosure", b =>
                {
                    b.Property<int>("EnclosureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxAnimals")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("EnclosureId");

                    b.ToTable("Enclosures");
                });

            modelBuilder.Entity("ZooManagement.Models.WorkAllocation", b =>
                {
                    b.Property<int>("WorkAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnclosureId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ZookeeperId")
                        .HasColumnType("INTEGER");

                    b.HasKey("WorkAllocationId");

                    b.HasIndex("EnclosureId");

                    b.HasIndex("ZookeeperId");

                    b.ToTable("WorkAllocations");
                });

            modelBuilder.Entity("ZooManagement.Models.Zookeeper", b =>
                {
                    b.Property<int>("ZookeeperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ZookeeperId");

                    b.ToTable("Zookeepers");
                });

            modelBuilder.Entity("ZooManagement.Models.Animal", b =>
                {
                    b.HasOne("ZooManagement.Models.AnimalType", "AnimalType")
                        .WithMany()
                        .HasForeignKey("AnimalTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZooManagement.Models.Enclosure", "Enclosure")
                        .WithMany()
                        .HasForeignKey("EnclosureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnimalType");

                    b.Navigation("Enclosure");
                });

            modelBuilder.Entity("ZooManagement.Models.AnimalType", b =>
                {
                    b.HasOne("ZooManagement.Models.Classification", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classification");
                });

            modelBuilder.Entity("ZooManagement.Models.WorkAllocation", b =>
                {
                    b.HasOne("ZooManagement.Models.Enclosure", "Enclosure")
                        .WithMany()
                        .HasForeignKey("EnclosureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZooManagement.Models.Zookeeper", "Zookeeper")
                        .WithMany()
                        .HasForeignKey("ZookeeperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enclosure");

                    b.Navigation("Zookeeper");
                });
#pragma warning restore 612, 618
        }
    }
}
